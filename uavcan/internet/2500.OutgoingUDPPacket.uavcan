#
# This message carries UDP packets from a node on the local bus to a remote host on
# the Internet or a LAN.
#
# Any node can broadcast a message of this type.
#
# All nodes that are capable of communication with the Internet or a LAN should subscribe to messages
# of this type and forward the payload to the indicated host via one or multiple UDP datagrams.
# Such nodes will be referred to as modem nodes.
#
# It is expected that some systems will have more than one modem node available.
# Each modem node is supposed to forward every message it sees, which will naturally create
# some degree of modular redundancy and fault tolerance. The remote host should therefore be able to
# properly handle possibly duplicating messages from different source addresses, in addition to
# possible duplications introduced by the UDP protocol itself. There are at least two obvious
# strategies that can be employed by the remote host:
#
#   - Accept only the first message, ignore duplicates. This approach requires that the UDP stream
#     should contain metadata necessary for the remote host to determine the source and ordering of
#     each received datum. This approach works best for periodic data, such as telemetry, where the
#     sender does not expect any responses.
#
#   - Process all messages, including duplicates. This approach assumes that the remote host acts
#     as a server, processing all received requests and providing responses to each. This arrangement
#     implies that the client may receive duplicated responses. It is therefore the client's
#     responsibility to resolve the possible ambiguity. An obvious solution is to accept the first
#     arrived response and ignore the later ones.
#
# Applications are free to choose whatever redundancy management strategy works best for them.
#
# If the source node expects that the remote host will send some data back, it must explicitly notify
# the modem nodes about this, so that they could prepare to perform reverse forwarding when the
# expected data arrives from the remote host. The technique of reverse forwarding is known in
# networking as IP Masquerading, or (in general) Network Address Translation (NAT). The notification
# is performed by means of setting one of the corresponding flags defined below.
#
# In order to be able to match datagrams received from remote hosts and the local nodes they should
# be forwarded to, modem nodes are required to keep certain metadata about outgoing datagrams. Such
# metadata is stored in a data structure referred to as NAT table, where every entry would normally
# contain at least the following fields:
#   - The local UDP port number that was used to send the outgoing datagram from.
#   - The IP address of the remote host.
#   - The ID of the local node that has sent the outgoing datagram.
#   - Value of the field session_id defined below.
#   - Possibly some other data, depending on the implementation.
#
# The modem nodes are required to keep each NAT table entry for at least NAT_ENTRY_TTL seconds
# since the last reverse forwarding notification was received. Should the memory resources of the
# modem node be exhausted, it is allowed to remove old NAT entries earlier, following the policy of
# least recent use.
#
# Having received a UDP packet from a remote host, the modem node would check the NAT table in order
# to determine where on the UAVCAN bus the received data should be forwarded to. If the NAT table
# contains no matches, the received data should be silently dropped. If a match is found, the
# modem node will forward the data to the recipient node using the service HandleIncomingUDPPacket.
# Whether the invocation of the service is successful or not is of no concern to the modem node.
# Please refer to the definition of the service data type for a mode in depth review of the reverse
# forwarding process.
#
# Modem nodes can also perform traffic shaping, shall it be needed, by means of delaying or
# dropping UDP forwarding requests that exceed the quota.
#
# To summarize, a typical data exchange occurrence should amount to the following actions:
#
#   - A local UAVCAN node broadcasts a message of type OutgoingUDPPacket with the payload it needs
#     to forward. If the node expects the remote host to send any data back, it sets the
#     masquerading flag.
#
#   - Every modem node on the bus receives the message and performs the following actions:
#
#       - The domain name is resolved, unless the destination address provided in the message
#         is already an IP address, in which case this step should be skipped.
#
#       - The domain name to IP address matching is added to a local DNS cache, although this
#         part is entirely implementation defined.
#
#       - The masquerading flag is checked. If it is set, a new entry is added to the NAT table.
#         If such entry already existed, its expiration timeout is reset. If no such entry existed
#         and a new one cannot be added because of memory limitations, the least recently used
#         (i.e. oldest) entry of the NAT table is replaced with the new one.
#
#       - The payload is forwarded to the determined IP address.
#
#   - At this point, forwarding is complete. Should any of the modem nodes receive an incoming
#     packet, they would attempt to perform reverse forwarding according to the above provided
#     algorithm.
#

#
# Modem nodes are required to keep NAT table entries for at least this amount of time,
# unless the table is overflowed, in which case it is allowed to remove least recently used
# entries in favor of newer ones.
# Modem nodes are required to be able to accommodate at least 100 entries in the NAT table.
# The units are seconds.
#
uint32 NAT_ENTRY_TTL = 86400

#
# This field is set to an arbitrary value by the transmitting node in order to be able to
# match the response with the locally kept context. The function of this field is virtually
# identical to that of UDP/IP port numbers. Modem nodes do not care about specific values
# kept in this field.
#
uint16 session_id

#
# Option flags.
#
uint8 FLAG_MASQUERADE = 1       # Expect data back (i.e. instruct the modem to add a new entry to the NAT table)
uint8 flags

#
# Domain name or IP address where the payload should be forwarded to.
#
Address destination_address

#
# Effective payload. This data will be forwarded to the remote host verbatim.
# Note that tail array optimization is active here.
#
uint8[<=1024] payload
